<?php

namespace TK\GitHubWebhook\Model;

use TK\GitHubWebhook\Util;

enum RepositoryVisibility: string
{
    case PUBLIC = "public";
    case PRIVATE = "private";
    case INTERNAL = "internal";
}

readonly class Repository
{
    public int $id;
    public string $node_id;
    public string $name;
    public string $full_name;
    public bool $private;
    public User $owner;
    public string $html_url;
    public string|null $description;
    public bool $fork;
    public string $url;
    public string $forks_url;
    public string $keys_url;
    public string $collaborators_url;
    public string $teams_url;
    public string $hooks_url;
    public string $issue_events_url;
    public string $events_url;
    public string $assignees_url;
    public string $branches_url;
    public string $tags_url;
    public string $blobs_url;
    public string $git_tags_url;
    public string $git_refs_url;
    public string $trees_url;
    public string $statuses_url;
    public string $languages_url;
    public string $stargazers_url;
    public string $contributors_url;
    public string $subscribers_url;
    public string $subscription_url;
    public string $commits_url;
    public string $git_commits_url;
    public string $comments_url;
    public string $issue_comment_url;
    public string $contents_url;
    public string $compare_url;
    public string $merges_url;
    public string $archive_url;
    public string $downloads_url;
    public string $issues_url;
    public string $pulls_url;
    public string $milestones_url;
    public string $notifications_url;
    public string $labels_url;
    public string $releases_url;
    public string $deployments_url;
    public string|int $created_at;
    public string $updated_at;
    public string|int|null $pushed_at;
    public string $git_url;
    public string $ssh_url;
    public string $clone_url;
    public string $svn_url;
    public string|null $homepage;
    public int $size;
    public int $stargazers_count;
    public int $watchers_count;
    public string|null $language;
    public bool $has_issues;
    public bool $has_projects;
    public bool $has_downloads;
    public bool $has_wiki;
    public bool $has_pages;
    public bool|null $has_discussions;
    public int $forks_count;
    public string|null $mirror_url;
    public bool $archived;
    public bool|null $disabled;
    public int $open_issues_count;
    public License|null $license;
    public int $forks;
    public int $open_issues;
    public int $watchers;
    public int|null $stargazers;
    public string $default_branch;
    public bool|null $allow_squash_merge;
    public bool|null $allow_merge_commit;
    public bool|null $allow_rebase_merge;
    public bool|null $allow_auto_merge;
    public bool|null $allow_forking;
    public bool|null $allow_update_branch;
    public bool|null $use_squash_pr_title_as_default;
    public string|null $squash_merge_commit_message;
    public string|null $squash_merge_commit_title;
    public string|null $merge_commit_message;
    public string|null $merge_commit_title;
    public bool $is_template;
    public bool $web_commit_signoff_required;
    /** @var string[] $topics */
    public array $topics;
    public RepositoryVisibility $visibility;
    public bool|null $delete_branch_on_merge;
    public string|null $master_branch;
    public RepositoryPermissions|null $permissions;
    public bool|null $public;
    public string|null $organization;
    public string|array|null $custom_properties;

    public static function fromArray(array $data): Repository
    {
        $instance = new Repository();
        $instance->id = $data["id"];
        $instance->node_id = $data["node_id"];
        $instance->name = $data["name"];
        $instance->full_name = $data["full_name"];
        $instance->private = $data["private"];
        $instance->owner = User::fromArray($data["owner"]);
        $instance->html_url = $data["html_url"];
        $instance->description = $data["description"] ?? null;
        $instance->fork = $data["fork"];
        $instance->url = $data["url"];
        $instance->forks_url = $data["forks_url"];
        $instance->keys_url = $data["keys_url"];
        $instance->collaborators_url = $data["collaborators_url"];
        $instance->teams_url = $data["teams_url"];
        $instance->hooks_url = $data["hooks_url"];
        $instance->issue_events_url = $data["issue_events_url"];
        $instance->events_url = $data["events_url"];
        $instance->assignees_url = $data["assignees_url"];
        $instance->branches_url = $data["branches_url"];
        $instance->tags_url = $data["tags_url"];
        $instance->blobs_url = $data["blobs_url"];
        $instance->git_tags_url = $data["git_tags_url"];
        $instance->git_refs_url = $data["git_refs_url"];
        $instance->trees_url = $data["trees_url"];
        $instance->statuses_url = $data["statuses_url"];
        $instance->languages_url = $data["languages_url"];
        $instance->stargazers_url = $data["stargazers_url"];
        $instance->contributors_url = $data["contributors_url"];
        $instance->subscribers_url = $data["subscribers_url"];
        $instance->subscription_url = $data["subscription_url"];
        $instance->commits_url = $data["commits_url"];
        $instance->git_commits_url = $data["git_commits_url"];
        $instance->comments_url = $data["comments_url"];
        $instance->issue_comment_url = $data["issue_comment_url"];
        $instance->contents_url = $data["contents_url"];
        $instance->compare_url = $data["compare_url"];
        $instance->merges_url = $data["merges_url"];
        $instance->archive_url = $data["archive_url"];
        $instance->downloads_url = $data["downloads_url"];
        $instance->issues_url = $data["issues_url"];
        $instance->pulls_url = $data["pulls_url"];
        $instance->milestones_url = $data["milestones_url"];
        $instance->notifications_url = $data["notifications_url"];
        $instance->labels_url = $data["labels_url"];
        $instance->releases_url = $data["releases_url"];
        $instance->deployments_url = $data["deployments_url"];
        $instance->created_at = $data["created_at"];
        $instance->updated_at = $data["updated_at"];
        $instance->pushed_at = $data["pushed_at"] ?? null;
        $instance->git_url = $data["git_url"];
        $instance->ssh_url = $data["ssh_url"];
        $instance->clone_url = $data["clone_url"];
        $instance->svn_url = $data["svn_url"];
        $instance->homepage = $data["homepage"] ?? null;
        $instance->size = $data["size"];
        $instance->stargazers_count = $data["stargazers_count"];
        $instance->watchers_count = $data["watchers_count"];
        $instance->language = $data["language"] ?? null;
        $instance->has_issues = $data["has_issues"];
        $instance->has_projects = $data["has_projects"];
        $instance->has_downloads = $data["has_downloads"];
        $instance->has_wiki = $data["has_wiki"];
        $instance->has_pages = $data["has_pages"];
        $instance->has_discussions = $data["has_discussions"] ?? null;
        $instance->forks_count = $data["forks_count"];
        $instance->mirror_url = $data["mirror_url"] ?? null;
        $instance->archived = $data["archived"];
        $instance->disabled = $data["disabled"] ?? null;
        $instance->open_issues_count = $data["open_issues_count"];
        $instance->license = Util::getArgSafe($data, "license", License::fromArray(...));
        $instance->forks = $data["forks"];
        $instance->open_issues = $data["open_issues"];
        $instance->watchers = $data["watchers"];
        $instance->stargazers = $data["stargazers"] ?? null;
        $instance->default_branch = $data["default_branch"];
        $instance->allow_squash_merge = $data["allow_squash_merge"] ?? null;
        $instance->allow_merge_commit = $data["allow_merge_commit"] ?? null;
        $instance->allow_rebase_merge = $data["allow_rebase_merge"] ?? null;
        $instance->allow_auto_merge = $data["allow_auto_merge"] ?? null;
        $instance->allow_forking = $data["allow_forking"] ?? null;
        $instance->allow_update_branch = $data["allow_update_branch"] ?? null;
        $instance->use_squash_pr_title_as_default = $data["use_squash_pr_title_as_default"] ?? null;
        $instance->squash_merge_commit_message = $data["squash_merge_commit_message"] ?? null;
        $instance->squash_merge_commit_title = $data["squash_merge_commit_title"] ?? null;
        $instance->merge_commit_message = $data["merge_commit_message"] ?? null;
        $instance->merge_commit_title = $data["merge_commit_title"] ?? null;
        $instance->is_template = $data["is_template"];
        $instance->web_commit_signoff_required = $data["web_commit_signoff_required"];
        $instance->topics = $data["topics"];
        $instance->visibility = RepositoryVisibility::from($data["visibility"]);
        $instance->delete_branch_on_merge = $data["delete_branch_on_merge"] ?? null;
        $instance->master_branch = $data["master_branch"] ?? null;
        $instance->permissions = Util::getArgSafe($data, "permissions", RepositoryPermissions::fromArray(...));
        $instance->public = $data["public"] ?? null;
        $instance->organization = $data["organization"] ?? null;
        $instance->custom_properties = $data["custom_properties"] ?? null;
        return $instance;
    }
}
